node {
   def mvnHome
   def server=Artifactory.server "giri_art"
    try{

       stage('Preparation') {
          git "https://github.com/gireeshgg/Glogin.git" 
         //git "https://github.com/sahana1212/CrudMVC.git"
         //git "https://github.com/gireeshgg/springMvc.git"
         //git "https://github.com/anoop600/girish.git"
        // git "https://github.com/srinivasbv22/girish.git"
         mvnHome=tool 'Maven'
        }
     /*   stage('SonarQube'){
          withSonarQubeEnv('Sonar')  {
              withEnv( ["PATH+MAVEN=${mvnHome}/bin"] ) {
                sh "mvn clean package sonar:sonar"
            }
          }
        }
         stage("Quality Gate") {
            timeout(time: 30, unit: 'SECONDS') { // Just in case something goes wrong, pipeline will be killed after a timeout
            def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
            if (qg.status != 'OK') {
            error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
            }
         }
         */
         
         
         
       stage('build'){
       
             withEnv( ["PATH+MAVEN=${mvnHome}/bin"] ) {
             sh "mvn clean package"
            }
           
             withEnv(['JIRA_SITE=jira1']) {
                  def transitionInput =
                             [transition: [id: '21']]
                            jiraTransitionIssue idOrKey: 'JENKY-1', input: transitionInput
             }
         
        }
        
        stage('Artifactory upload') {
        def uploadSpec = """
        { "files": [ { "pattern": "/var/lib/jenkins/workspace/dockerdeploy/target/*.war", "target": "giri" } ] }"""
            server.upload(uploadSpec)
            
            withEnv(['JIRA_SITE=jira1']) {
                  def transitionInput =
                             [transition: [id: '31']]
                            jiraTransitionIssue idOrKey: 'JENKY-1', input: transitionInput
             }
            
        }
        stage('downloading artifact')
        {
        def downloadSpec="""{ "files":[ { "pattern":"giri/*.war", "target":"/var/lib/jenkins/workspace/dockerdeploy/" } ] }"""
        server.download(downloadSpec)
        withEnv(['JIRA_SITE=jira1']) {
                  def transitionInput =
                             [transition: [id: '41']]
                            jiraTransitionIssue idOrKey: 'JENKY-1', input: transitionInput
             }
        } 
        stage('tomcat deploy'){
            sh "scp -i /var/lib/jenkins/.ssh/id_rsa  /var/lib/jenkins/workspace/dockerdeploy/target/*.war  giri1@girish.eastus.cloudapp.azure.com:/opt/webapps/"
             }
              withEnv(['JIRA_SITE=jira1']) {
            jiraAddComment idOrKey: 'JENKY-1', comment: 'Build Successful.'
            }
            
        
        }
        catch(err){
            //jira new issue raising
            withEnv(['JIRA_SITE=jira1']) {
             def testIssue = [fields: [ 
                               project: [key:'JENKY'],
                               summary: 'New JIRA Created from Jenkins.',
                               description: 'New JIRA Created from Jenkins.',
                               issuetype: [name: 'Bug']]]

            response = jiraNewIssue issue: testIssue

            echo response.successful.toString()
            echo response.data.toString()
            }
            withEnv(['JIRA_SITE=jira1']) {
            jiraAssignIssue idOrKey: 'JENKY-1', userName: 'admin'
             }
            
            withEnv(['JIRA_SITE=jira1']) {
            jiraAddComment idOrKey: 'JENKY-1', comment: 'please look upon the issue.'
            }


            
        //send email to respective person
            mail subject:"${BUILD_NUMBER}-BUID STATUS",
            body:    "It appears that ${BUILD_NUMBER}th build is failed, somebody should do something about that",
            charset: 'UTF-8',
            mimeType: 'text/html',
            from:    '',
            to:      'dotdupster@gmail.com'
            currentBuild.result="FAILED"
         }
        
}
